extern crate icmp;

fn main() {
    let mut socket = icmp::IcmpSocket::connect("fe80::9537:b415:cd83:8e2f:0")
        .expect("Failed to create socket (try to run with sudo)");

    // Prepared request
    let request: Vec<u8> = vec![
        0x08, // Type ECHO request
        0x00, // Code 0
        0xbb, 0xb9, // Checksum
        0x23, 0x22, // Identifier
        0x00, 0x01, // Sequence number
        0x56, 0xbd, 0xa9, 0x57, 0x00, 0x00, 0x00, 0x00, 0x56, 0x3b, 0x04, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
        0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c,
        0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, // Data
    ];

    socket.send(&request).expect("Failed to send request");
    let mut response = [0; 256];
    let (size, addr) = socket.recv_from(&mut response)
        .expect("Failed to receive response");

    println!("Received {} bytes from {}", size, addr);
    println!("Type: {} (should be 0)", response[0]);
    println!("Code: {} (should be 0)", response[1]);
}
